import os

# -----------------------------------------------------
def setenvpath(env):
    try:
	return os.environ[env] + "/"
    except:
	print "Environment variable %s not set!"%(env)
	pass
	
    return "." 

# -----------------------------------------------------

APPLDIR="@prefix@"

#CTYPEDIR_OUT = "/local_disk2/data/Meteosat8/output"
#CTTHDIR_OUT = "/local_disk2/data/Meteosat8/output"
#CTYPEDIR_IN = "/local_disk2/data/Meteosat8/PGE02"
#CTTHDIR_IN = "/local_disk2/data/Meteosat8/PGE03"
#CTYPEDIR_IN = "/data/prod/Preop_MSG_NWCSAF/v1_2/export/PGE02"
#CTTHDIR_IN = "/data/prod/Preop_MSG_NWCSAF/v1_2/export/PGE03"
#RGBDIR_OUT = "/local_disk2/data/Meteosat8/RGBs"
#RGBDIR_OUT = "/local_disk2/data/Meteosat8/SeviriChannels"
#RGBDIR_IN = "/data/arkiv/satellit/geo/ceuro"

CTYPEDIR_OUT = "/local_disk/data/Meteosat8/MesanX"
CTTHDIR_OUT = "/local_disk/data/Meteosat8/MesanX"
CTYPEDIR_IN = "/opt/MSG/current/export/PGE02"
CTTHDIR_IN = "/opt/MSG/current/export/PGE03"
RGBDIR_OUT = "/local_disk/data/Meteosat8/RGBs"
RGBDIR_IN = "/opt/MSG/current/tmp"

FSERVER_CTYPEDIR_OUT = "/data/24/saf/msg/pge"
FSERVER_CTTHDIR_OUT = "/data/24/saf/msg/pge"
FSERVER_RGBDIR_OUT = "/data/24/saf/msg/rgb"
FSERVER_SYNC = 1 # Equals 1 if data should be distributed to the fileserver, otherwise 0.
SYNC = "/usr/bin/rsync -crzul"

MSG_SATELLITE = "met08"
MSG_AREA = "CEuro"
MSG_AREA_CENTER=(429,1999)
ROWS,COLS=(700,900)

LONFILE = "%s/cst/C%.4d_%.4d_S%.4d_%.4d.LON"%(APPLDIR,MSG_AREA_CENTER[0],MSG_AREA_CENTER[1],ROWS,COLS)
LATFILE = "%s/cst/C%.4d_%.4d_S%.4d_%.4d.LAT"%(APPLDIR,MSG_AREA_CENTER[0],MSG_AREA_CENTER[1],ROWS,COLS)

COMPRESS_LVL=6

DSEC_SLOTS=3600/4 # Slot-frequency considered = 15 minutes

USGS_DIR = setenvpath("SM_USGS_DIR") 
AUX_DIR=setenvpath("SM_AUXILIARY_DIR")
COAST_FILE = "%s/world_map.ascii"%(USGS_DIR)

# List of areas:
NWCSAF_MSG_AREAS = ["scan","mesanX","euro4","sswe"]
NWCSAF_MSG_AREAS_IMPROD = ["scan","euro4","sswe"]
NORDRAD_AREAS = ["euro4"]

#
EXTRA_IMAGE_FORMATS = {}

for aid in NWCSAF_MSG_AREAS:
    EXTRA_IMAGE_FORMATS[aid] = {}

for aid in NWCSAF_MSG_AREAS_IMPROD:
    EXTRA_IMAGE_FORMATS[aid]={"PGE01":[],"PGE02":["tif"],"PGE03":["tif"],
    	                      "PGE04":[],"RGB_DAY":[],"RGB_NIGHT":[]}

# PGE02 IMAGE_LEGENDS:
#   FULL: "get_cms_modified" - nwcsaf/msg colouring
#   VV:   "get_ctype_vv"     - For the Swedish road authoroties

# PGE03 IMAGE_LEGENDS:


# Products on which areas, and with which colour-palettes, and in what image formats?:
PRODUCT_IMAGES={"PGE02":{"mesanX" :{"standard":["png"]},
			 "sswe"   :{"standard":["png"]},#,"vv2"  :["png"]},
		         "scan"   :{"standard":["png"]},#,"vv2"  :["png"]},
		         "euro"   :{"standard":["png"]}},#,"vv2"  :["png"]}},
		"PGE03":{"mesanX":{"standard":["png"]},
			 "sswe"  :{"standard":["png"]},
			 "scan"  :{"standard":["png"]},
			 "euro"  :{"standard":["png"]}
		}
		}

# Which LEGENDS/PALETTES to which products and region:
from smhi_safnwc_legends import *
from pps_array2image import get_cms_modified

PGE02_LEGENDS = {"standard":get_cms_modified()}#,"vv2":get_ctype_vv2()}
PGE02_LEGEND_NAMES = {}

for aid in NWCSAF_MSG_AREAS:
    PGE02_LEGEND_NAMES[aid] = ("standard",)
for aid in NWCSAF_MSG_AREAS_IMPROD:
    PGE02_LEGEND_NAMES[aid] = ("standard",)
    #PGE02_LEGEND_NAMES[aid] = ("standard","vv2")

PGE03_LEGENDS = {"standard":"height"}
PGE03_LEGEND_NAMES = {}
for aid in NWCSAF_MSG_AREAS:
    PGE03_LEGEND_NAMES[aid] = ("standard",)

INFORMSIR_SCRIPT="/data/prod/sirexp/sir2/lib/informsirnw.csh"
SIR_DIR="/data/prod/sirexp/sir2/data"
PGE02_SIR_NAMES={"standard":"02a"}
PGE03_SIR_NAMES={"standard":"03a"}