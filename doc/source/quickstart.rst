============
 Quickstart
============

The software uses OOP extensively, to allow higher level metaobject handling.

For this tutorial, we will use the Meteosat plugin and data.


First example
=============

Ok, let's get it on::

    >>> import meteosat09
    >>> import datetime
    >>> time_slot = datetime.datetime(2009, 10, 8, 14, 30)
    >>> global_data = meteosat09.MeteoSatSeviriSnapshot(area = "EuropeCanary", time_slot = time_slot)
    >>> global_data.load([0.6, 0.8, 10.8])
    [INFO: 2009-10-30 09:10:36 : pp.meteosat09] Loading channels...
    [INFO: 2009-10-30 09:10:38 : pp.meteosat09] Loading channels done.
    >>> img = global_data.overview()
    >>> img.save("./myoverview.png")

In this example, we create a MeteoSatSeviriSnapshot object specifying the area
we will work on and the time of the snapshot of interest. The time is defined
as a datetime object. The area defines which data to load in the next step.

The next step is loading the data. Here we call it with a list of the
wavelengths of the channels we are interested in. The wavelengths are given in
micrometers and have to be given as a floating point number (*i.e.*, don't type
'1', but '1.0').

Once the channels are loaded, we generate an overview RGB composite image, and
save it as a png image.

We want more !
==============

Now, this last step worked because the channels needed for the overview are
loaded. If I try now to generate a natural color composite, it will result in
an error::

   
   >>> img = global_data.natural()
   Traceback (most recent call last):
     File "<stdin>", line 1, in <module>
     File "/local_disk/usr/test/lib/python2.5/site-packages/satellite.py", line 278, in natural
       self.check_channels(0.6, 0.8, 1.6)
     File "/local_disk/usr/test/lib/python2.5/site-packages/satellite.py", line 164, in check_channels
       raise RuntimeError("Required channel not loaded, aborting.")
   RuntimeError: Required channel not loaded, aborting.

So it means that we have to load the channels first. To do this we could enter
the channels list to load manually, as we did for the overview, but we provide
a way to get the list of channels needed by a given method using the
`prerequisites` method attribute::

    >>> global_data.load(global_data.natural.prerequisites)
    [INFO: 2009-10-30 09:31:27 : pp.meteosat09] Loading channels...
    [INFO: 2009-10-30 09:31:28 : pp.meteosat09] Loading channels done.
    >>> img = global_data.natural()

Now you can save the image::

    >>> img.save("./mynaturalcolors.tif")

The image is saved here in GeoTiff_ format. 

.. _GeoTiff: http://trac.osgeo.org/geotiff/

By the way, if you want to combine several prerequisites for channel loading,
you can do::

    global_data.load(global_data.overview.prerequisites | global_data.natural.prerequisites)

and add as many `| global_data.mymethod.prerequisites` as needed.

Retrieving channels
===================

Retrieving channels is dead easy::

   >>> global_data[0.6]
   'VIS06: lambda (0.560,0.635,0.710)um, shape (1200, 3000), resolution 3000m'

or::

   >>> global_data["VIS06"]
   'VIS06: lambda (0.560,0.635,0.710)um, shape (1200, 3000), resolution 3000m'


Projections
===========

Until now, we have used the channels directly as provided by the satellite,
that is in satellite projection. Generating composites thus produces views in
satellite projection, *i.e.* as viewed by the satellite.

Most often however, we will want to project the data onto a specific area so
that only the area of interest is depicted in the RGB composites.

Here is how we do that::

    >>> local_data = global_data.project("eurol")
    [INFO: 2009-10-30 10:31:50 : pp.coverage] Getting coverage for EuropeCanary onto eurol.
    [INFO: 2009-10-30 10:31:50 : pp.coverage] Read the coverage from file /local_disk/usr/test/share/msgpp/msg_coverage_EuropeCanary.eurol.3000.hdf...
    [INFO: 2009-10-30 10:31:50 : pp.satellite] Projecting channel VIS06 (0.635000um)...
    [INFO: 2009-10-30 10:31:51 : pp.satellite] Projecting channel VIS08 (0.810000um)...
    [INFO: 2009-10-30 10:31:53 : pp.satellite] Projecting channel IR108 (10.800000um)...
    [INFO: 2009-10-30 10:31:55 : pp.satellite] Projecting channel IR16 (1.640000um)...

Now we have projected data in the `local_data` variable and we can operate as
before to generate and play with RGB composites.

PGEs
====

From the satellite data PGEs [#f1]_ are generated by the accompanying program.
The loading procedure for PGEs is exactly the same as with regular channels::

    >>> global_data.load(["CTTH"])
    [INFO: 2009-10-30 11:15:56 : pp.meteosat09] Loading channels...
    [INFO: 2009-10-30 11:15:56 : pp.meteosat09] file-match: /local_disk/usr/src/msg/export/PGE03/SAFNWC_MSG?_CTTH_200910081430_EuropeCanary.PLAX.CTTH.0.h5
    [INFO: 2009-10-30 11:15:56 : pp.meteosat09] MSG CTTH file found: /local_disk/usr/src/msg/export/PGE03/SAFNWC_MSG2_CTTH_200910081430_EuropeCanary.PLAX.CTTH.0.h5
    [INFO: 2009-10-30 11:15:56 : pp.meteosat09] Read MSG CTTH file: /local_disk/usr/src/msg/export/PGE03/SAFNWC_MSG2_CTTH_200910081430_EuropeCanary.PLAX.CTTH.0.h5
    [INFO: 2009-10-30 11:15:56 : pp.meteosat09] Loading channels done.

and they can be retrieved as simply as before::
    
    >>> global_data["CTTH"] 
    'CTTH: lambda (0.000,0.000,0.000)um, shape nan, resolution 3000m'

.. rubric:: Footnotes

.. [#f1] PGEs in Meteosat : cloudtype and CTTH
